// Contexto do Leonardo - Assistente IA da EngeSEP
const Logger = require('./logger');

const CONFIG_HISTORICO = {
    maxPerguntas: 5,
    incluirRespostas: true,
    incluirTimestamp: true,
    separador: '\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n',
    incluirDadosAPI: true
};

// Estrutura atualizada do hist√≥rico
let historicoInteracoes = new Map();

/**
 * Adiciona uma intera√ß√£o completa ao hist√≥rico
 */
function adicionarInteracaoHistorico(userId, pergunta, respostaOpenAI) {
    try {
        if (!historicoInteracoes.has(userId)) {
            historicoInteracoes.set(userId, []);
        }

        const historico = historicoInteracoes.get(userId);
        const novaInteracao = {
            timestamp: new Date().toISOString(),
            pergunta: pergunta,
            respostaOpenAI: respostaOpenAI,
            dadosAPI: null,
            tipoComando: null
        };

        historico.push(novaInteracao);

        // Manter apenas o n√∫mero m√°ximo configurado
        if (historico.length > CONFIG_HISTORICO.maxPerguntas) {
            historico.shift();
        }

        historicoInteracoes.set(userId, historico);
        
        Logger.debug(`Hist√≥rico atualizado para ${userId}: ${historico.length} intera√ß√µes`);
    } catch (error) {
        console.log(error);
        Logger.error('Erro ao adicionar intera√ß√£o ao hist√≥rico:', error);
    }
}

/**
 * Atualiza a √∫ltima intera√ß√£o com dados da API
 */
function atualizarDadosAPI(userId, dadosAPI, tipoComando) {
    try {
        if (!historicoInteracoes.has(userId)) {
            return;
        }

        const historico = historicoInteracoes.get(userId);
        if (historico.length === 0) {
            return;
        }

        // Atualizar a √∫ltima intera√ß√£o
        const ultimaInteracao = historico[historico.length - 1];
        ultimaInteracao.dadosAPI = dadosAPI;
        ultimaInteracao.tipoComando = tipoComando;

        historicoInteracoes.set(userId, historico);
        
        Logger.debug(`Dados API adicionados ao hist√≥rico: tipo=${tipoComando}`);
    } catch (error) {
        console.log(error);
        Logger.error('Erro ao atualizar dados da API no hist√≥rico:', error);
    }
}

function obterHistoricoFormatado(userId) {
    if (!historicoInteracoes.has(userId)) return '';
    const historico = historicoInteracoes.get(userId);
    if (!historico.length) return '';
  
    let out = '\n\n=== HIST√ìRICO DE INTERA√á√ïES ANTERIORES ===\n';
    out += `Total de intera√ß√µes no contexto: ${historico.length}\n\n`;
  
    historico.forEach((item, i) => {
        out += `üîπ INTERA√á√ÉO ${i + 1}\n`;
        if (CONFIG_HISTORICO.incluirTimestamp) {
            out += `Data/Hora: ${new Date(item.timestamp).toLocaleString('pt-BR')}\n`;
        }
        out += `Pergunta do usu√°rio: "${item.pergunta}"\n`;
  
        // Resposta OpenAI (comando x texto)
        if (item.respostaOpenAI) {
            try {
                const json = JSON.parse(item.respostaOpenAI);
                if (json.comando) {
                    out += `Comando gerado: ${json.comando}\n`;
                    if (json.parametros) {
                        out += `Par√¢metros: ${JSON.stringify(json.parametros)}\n`;
                    }
                } else {
                    out += `Resposta direta: ${item.respostaOpenAI.substring(0, 100)}...\n`;
                }
            } catch {
                const resumo = item.respostaOpenAI.substring(0, 100);
                out += `Resposta: ${resumo}${item.respostaOpenAI.length > 100 ? '...' : ''}\n`;
            }
        }
  
        // Dados da API quando n√£o forem nulos
        if (CONFIG_HISTORICO.incluirDadosAPI && item.dadosAPI) {
            const tipo = item.tipoComando || 'N/A';
            out += `Tipo de consulta API: ${tipo}\n`;
  
            if (tipo === 'historico') {
                out += `Dados hist√≥ricos consultados:\n`;
                out += `  Usina: ${item.dadosAPI.usina || 'N/A'}\n`;
                out += `  Per√≠odo: ${item.dadosAPI.periodo || 'N/A'}\n`;
                
                const res = item.dadosAPI.resultado;
                if (res && typeof res === 'object') {
                    const keys = Object.keys(res);
                    out += `  Unidades geradoras: ${keys.join(', ')}\n`;
                    
                    // Calcular totais aproximados
                    let totalGeral = 0;
                    keys.forEach(k => {
                        const dados = res[k];
                        if (Array.isArray(dados)) {
                            const soma = dados.reduce((acc, it) => {
                                const v = it.producao_Mwh || it.producao_mwh || it.MWh || it.mwh || it.valor || it.value || 0;
                                return acc + (typeof v === 'number' ? v : 0);
                            }, 0);
                            totalGeral += soma;
                            out += `     ${k}: ${dados.length} registros, soma: ${soma.toFixed(2)} MWh\n`;
                        }
                    });
                    if (totalGeral > 0) {
                        out += `  Total geral aproximado: ${totalGeral.toFixed(2)} MWh\n`;
                    }
                }
  
            } else if (tipo === 'leitura') {
                out += `Dados em tempo real consultados:\n`;
                out += `  Usina: ${item.dadosAPI.usina || 'N/A'}\n`;
                out += `  Timestamp: ${item.dadosAPI.timestamp || 'N/A'}\n`;
                
                const ugs = item.dadosAPI.unidades_geradoras || item.dadosAPI.ugs || null;
                if (ugs && typeof ugs === 'object') {
                    Object.keys(ugs).forEach(ug => {
                        const u = ugs[ug] || {};
                        out += `  ${ug}:\n`;
                        if (u.erro) {
                            out += `    Erro: ${u.erro}\n`;
                        } else if (u.dados) {
                            Object.keys(u.dados).forEach(tipoDado => {
                                const dadoValor = u.dados[tipoDado];
                                out += `    ${tipoDado}: `;
                                if (dadoValor && typeof dadoValor === 'object') {
                                    // Se √© um objeto, mostrar suas propriedades
                                    const valores = Object.keys(dadoValor).map(k => `${k}: ${dadoValor[k]}`).join(', ');
                                    out += `{${valores}}\n`;
                                } else {
                                    // Se √© um valor simples
                                    out += `${dadoValor}\n`;
                                }
                            });
                        } else {
                            out += `    Sem dados dispon√≠veis\n`;
                        }
                    });
                }
            }
        }
        out += '\n';
    });
  
    out += '=== FIM DO HIST√ìRICO ===\n\n';
    return out;
}

/**
 * Obt√©m contexto completo com hist√≥rico
 */
function getContextoComHistorico(userId, usinasPermitidas) {
    const contextoBase = getContextoLeonardo(userId, usinasPermitidas);
    const historico = obterHistoricoFormatado(userId);
    
    return contextoBase + historico;
}

/**
 * Limpa o hist√≥rico de um usu√°rio espec√≠fico
 */
function limparHistoricoUsuario(userId) {
    historicoInteracoes.delete(userId);
}

/**
 * Limpa todo o hist√≥rico de todos os usu√°rios
 */
function limparTodoHistorico() {
    historicoInteracoes.clear();
}

/**
 * Obt√©m estat√≠sticas do hist√≥rico
 */
function obterEstatisticasHistorico() {
    const totalUsuarios = historicoInteracoes.size;
    let totalPerguntas = 0;
    
    for (const historico of historicoInteracoes.values()) {
        totalPerguntas += historico.length;
    }
    
    return {
        totalUsuarios,
        totalPerguntas,
        maxPerguntasPorUsuario: CONFIG_HISTORICO.maxPerguntas,
        configuracao: { ...CONFIG_HISTORICO }
    };
}

/**
 * Atualiza a configura√ß√£o do hist√≥rico
 */
function atualizarConfigHistorico(novaConfig) {
    Object.assign(CONFIG_HISTORICO, novaConfig);
}

function getContextoLeonardo(userId, usinasPermitidas) {
    // Obter data e hora atual
    const agora = new Date();
    const dataAtual = agora.toLocaleDateString('pt-BR');
    const horaAtual = agora.toLocaleTimeString('pt-BR');
    const diaSemana = agora.toLocaleDateString('pt-BR', { weekday: 'long' });
    const mesAtual = agora.toLocaleDateString('pt-BR', { month: 'long' });
    const anoAtual = agora.getFullYear();
    
    // Calcular datas relativas importantes
    const ontem = new Date(agora);
    ontem.setDate(agora.getDate() - 1);
    const dataOntem = ontem.toLocaleDateString('pt-BR');
    
    // √öltimos 3 meses para consultas
    const mes1Atras = new Date(agora);
    mes1Atras.setMonth(agora.getMonth() - 1);
    const dataMes1Atras = `01/${String(mes1Atras.getMonth() + 1).padStart(2, '0')}/${mes1Atras.getFullYear()}`;
    const fimMes1Atras = new Date(mes1Atras.getFullYear(), mes1Atras.getMonth() + 1, 0);
    const dataFimMes1Atras = fimMes1Atras.toLocaleDateString('pt-BR');
    
    const mes2Atras = new Date(agora);
    mes2Atras.setMonth(agora.getMonth() - 2);
    const dataMes2Atras = `01/${String(mes2Atras.getMonth() + 1).padStart(2, '0')}/${mes2Atras.getFullYear()}`;
    const fimMes2Atras = new Date(mes2Atras.getFullYear(), mes2Atras.getMonth() + 1, 0);
    const dataFimMes2Atras = fimMes2Atras.toLocaleDateString('pt-BR');
    
    const mes3Atras = new Date(agora);
    mes3Atras.setMonth(agora.getMonth() - 3);
    const dataMes3Atras = `01/${String(mes3Atras.getMonth() + 1).padStart(2, '0')}/${mes3Atras.getFullYear()}`;
    const fimMes3Atras = new Date(mes3Atras.getFullYear(), mes3Atras.getMonth() + 1, 0);
    const dataFimMes3Atras = fimMes3Atras.toLocaleDateString('pt-BR');
    
    // √öltimos 3 dias
    const tresDiasAtras = new Date(agora);
    tresDiasAtras.setDate(agora.getDate() - 3);
    const dataTresDiasAtras = tresDiasAtras.toLocaleDateString('pt-BR');

    return `
INSTRU√á√ïES SISTEMA LEONARDO - ASSISTENTE IA ENGESEP

IDENTIDADE E FUN√á√ÉO:
Nome: Leonardo
Papel: Assistente virtual especializado em usinas hidroel√©tricas
Empresa: EngeSEP
Interface: WhatsApp
Tom: Profissional, t√©cnico, objetivo e prestativo

CONTEXTO TEMPORAL ATUAL:
Data/Hora: ${dataAtual} √†s ${horaAtual}
Dia da semana: ${diaSemana}
M√™s/Ano: ${mesAtual} de ${anoAtual}

O ${userId} tem acesso √†s seguintes usinas: ${usinasPermitidas.join(', ')}, sendo assim, n√£o responda com dados de usinas n√£o permitidas, apenas envie uma menssagem que ele n√£o tem acesso.

üè≠ DADOS DAS USINAS HIDROEL√âTRICAS:

üîπ CGH APARECIDA:
‚Ä¢ Raz√£o Social: CGH Aparecida Energia LTDA
‚Ä¢ CNPJ: 23.607.291/0001-86
‚Ä¢ Localiza√ß√£o: Entre Rios, SC
‚Ä¢ Capacidade: 3,2 MW (Turbina Kaplan + Gerador 3,65 MW)
‚Ä¢ In√≠cio: 06/08/2018
‚Ä¢ Gera√ß√£o hist√≥rica: 2021: 5.645 MWh | 2022: 8.559 MWh | 2023: 5.354 MWh | 2024: 8.402 MWh
‚Ä¢ Acionistas: Denilson Casal (56%), Gelson Oliveira (5%), Jos√© Caramori (14%), Jelder Bavaresco (15%), Luciano Ribeiro (1,5%), Jos√© Gustamann (1,5%)

üîπ CGH FAE:
‚Ä¢ Raz√£o Social: Fae Energ√©tica Ltda
‚Ä¢ CNPJ: 32.927.636/0001-70
‚Ä¢ Localiza√ß√£o: Capinzal, SC
‚Ä¢ Capital Social: R$ 3.500.000,00
‚Ä¢ In√≠cio: 01/03/2019

üîπ CGH PICADAS ALTAS:
‚Ä¢ Raz√£o Social: CGH Picadas Altas Energia SPE Ltda
‚Ä¢ CNPJ: 41.234.054/0001-07
‚Ä¢ Localiza√ß√£o: Marema, SC
‚Ä¢ Capital Social: R$ 2.000.000,00
‚Ä¢ In√≠cio: 16/03/2021

üîπ CGH HOPPEN:
‚Ä¢ Raz√£o Social: CGH Hoppen Caveiras Energia Ltda
‚Ä¢ CNPJ: 38.352.880/0001-38
‚Ä¢ Localiza√ß√£o: Lages, SC
‚Ä¢ Capital Social: R$ 12.000.000,00
‚Ä¢ In√≠cio: 04/09/2020

üîπ PCH DAS PEDRAS:
‚Ä¢ Raz√£o Social: Euclides Maciel Energ√©tica S.A.
‚Ä¢ CNPJ: 08.812.700/0001-92
‚Ä¢ Localiza√ß√£o: Xanxer√™, SC
‚Ä¢ Capacidade: 5,6 MW
‚Ä¢ Opera√ß√£o comercial: 23/12/2017

Possibilidades de acesso:

Suas respostas ser√£o analisadas por uma fun√ß√£o que vai verificar se existe um comando JSON v√°lido.
Se existir, elas v√£o ser tratadas, podendo gerar uma consulta em uma API de tempo real ou hist√≥rico.
Se n√£o existir, sua resposta vai retornar diretamente para o usu√°rio.

Para acessar a API de tempo real, voc√™ deve gerar um comando JSON com o seguinte formato:
{"comando":"leitura","parametros":{"tipo":"potencias|nivel_agua|gerador|temperaturas","usina":"NOME_DA_USINA"}}

Ou ent√£o, para acessar a API de hist√≥rico:
{"comando":"historico","parametros":{"usina":"nome_usina","data_inicio":"DD/MM/YYYY","data_fim":"DD/MM/YYYY","periodo":"day|month"}}

Quando houver QUALQUER refer√™ncia de tempo:
Palavras-chave: hoje, ontem, anteontem, √∫ltimos X dias, semana passada, m√™s passado, 
√∫ltimos X meses, este m√™s, este ano, janeiro, fevereiro, etc.
Gere o comando JSON para consulta na API de dados hist√≥ricos.

Quando n√£o houver refer√™ncia de tempo e o usu√°rio peguntar sobre valores instant√¢neos:
Palavras-chave: agora, atual, neste momento, tempo real, status atual
Gere o comando JSON para consulta na API de dados em tempo real.

Se n√£o houver refer√™ncia a valores instant√¢neos ou hist√≥ricos, voc√™ deve pesquisar nas intera√ß√µes e responder diretamente para o usu√°rio conforme contexto.

DATAS DE REFER√äNCIA CALCULADAS:
‚Ä¢ Hoje: ${dataAtual}
‚Ä¢ Ontem: ${dataOntem}
‚Ä¢ √öltimos 3 dias: ${dataTresDiasAtras} at√© ${dataAtual}
‚Ä¢ M√™s passado: ${dataMes1Atras} at√© ${dataFimMes1Atras}
‚Ä¢ 2 meses atr√°s: ${dataMes2Atras} at√© ${dataFimMes2Atras}
‚Ä¢ 3 meses atr√°s: ${dataMes3Atras} at√© ${dataFimMes3Atras}

REGRAS:

- Respostas devem ser sempre em portugu√™s brasileiro.
- Sempre analisar se a pergunta cont√©m refer√™ncia temporal!
- Suas respostas tem integra√ß√£o de contexto para respostas anteriores.
- Suas respostas s√£o unit√°rias, sendo necess√°rio novo comando para emitir outra resposta.

EXEMPLOS PR√ÅTICOS DE COMANDOS:

CONSULTAS HIST√ìRICAS (sempre usar "historico"):

    Gera√ß√£o da FAE nos √∫ltimos 3 meses:
    {"comando":"historico","parametros":{"usina":"cgh_fae","data_inicio":"${dataMes3Atras}","data_fim":"${dataAtual}","periodo":"month"}}

    Produ√ß√£o da Hoppen hoje:
    {"comando":"historico","parametros":{"usina":"cgh_hoppen","data_inicio":"${dataAtual}","data_fim":"${dataAtual}","periodo":"day"}}

    Dados da Aparecida √∫ltimos 3 dias:
    {"comando":"historico","parametros":{"usina":"cgh_aparecida","data_inicio":"${dataTresDiasAtras}","data_fim":"${dataAtual}","periodo":"day"}}

    Gera√ß√£o mensal da PCH Pedras em julho 2025:
    {"comando":"historico","parametros":{"usina":"pch_pedras","data_inicio":"01/07/2025","data_fim":"31/07/2025","periodo":"month"}}
    OBS: Essas respostas v√£o ser formatadas em c√≥digo para enviar para o usu√°rio, n√£o sendo retrasmitidas para voc√™.
    Os dados Hist√≥ricos est√£o dispon√≠veis apenas para a gera√ß√£o de energia el√©trica em MWh, temperaturas, n√≠vel de √°gua e alarmes n√£o est√£o dispon√≠veis.

CONSULTAS TEMPO REAL (usar "leitura"):

    Pot√™ncia atual da CGH Aparecida:
    {"comando":"leitura","parametros":{"tipo":"potencias","usina":"CGH-APARECIDA"}}

    Temperatura atual da FAE:
    {"comando":"leitura","parametros":{"tipo":"temperaturas","usina":"CGH-FAE"}}

    N√≠vel de √°gua atual da CGH Aparecida:
    {"comando":"leitura","parametros":{"tipo":"nivel_agua","usina":"CGH-APARECIDA"}}

NOMENCLATURA IMPORTANTE:
‚Ä¢ Para "historico": usar lowercase com underscore (cgh_fae, cgh_hoppen, pch_pedras, cgh_picadas_altas, cgh_aparecida)
‚Ä¢ Para "leitura": usar UPPERCASE com h√≠fen (CGH-FAE, CGH-HOPPEN, PCH-PEDRAS, CGH-PICADAS-ALTAS, CGH-APARECIDA)

INSTRU√á√ïES CR√çTICAS:
1. SEMPRE retornar JSON v√°lido para consultas de dados em tempo real ou hist√≥rico
2. NUNCA responder "vou consultar" ou "aguarde" 
3. Para dados est√°ticos (CNPJ, raz√£o social), responder em linguagem natural
4. Usar as datas de refer√™ncia calculadas automaticamente
5. Para m√∫ltiplos meses, fazer UMA consulta com data_inicio do m√™s mais antigo
6. Se os dados n√£o estiverem dispon√≠veis no contexto de intera√ß√µes anteriores, fa√ßa uma consulta na API de dados em tempo real ou hist√≥rico.
`;
}

// Dados das usinas para valida√ß√£o e refer√™ncia
const USINAS_DISPONIVEIS = {
    'CGH-APARECIDA': {
        nome: 'CGH Aparecida',
        cnpj: '23.607.291/0001-86',
        localizacao: 'Entre Rios, SC',
        capacidade: '3.2 MW'
    },
    'CGH-FAE': {
        nome: 'CGH FAE',
        cnpj: '32.927.636/0001-70',
        localizacao: 'Capinzal, SC',
        capacidade: '2.0 MW'
    },
    'CGH-PICADAS-ALTAS': {
        nome: 'CGH Picadas Altas',
        cnpj: '41.234.054/0001-07',
        localizacao: 'Marema, SC',
        capacidade: '1 MW'
    },
    'CGH-HOPPEN': {
        nome: 'CGH Hoppen Caveiras',
        cnpj: '38.352.880/0001-38',
        localizacao: 'Lages, SC',
        capacidade: '2.6 MW'
    },
    'PCH-PEDRAS': {
        nome: 'PCH das Pedras',
        cnpj: '08.812.700/0001-92',
        localizacao: 'Xanxer√™, SC',
        capacidade: '5.6 MW'
    }
};

// Fun√ß√£o para obter contexto formatado para o usu√°rio
function getContextoFormatado(usuario, usinasDisponiveis) {
    return `Usu√°rio: ${usuario.nome}
Usinas dispon√≠veis: ${usinasDisponiveis.join(', ')}
${getContextoLeonardo()}`;
}

// Fun√ß√£o para validar nome de usina
function validarNomeUsina(nome) {
    const nomesValidos = Object.keys(USINAS_DISPONIVEIS);
    return nomesValidos.includes(nome.toUpperCase());
}

// Fun√ß√£o para obter dados da usina
function getDadosUsina(nome) {
    return USINAS_DISPONIVEIS[nome.toUpperCase()] || null;
}

// Fun√ß√£o para obter lista de usinas dispon√≠veis
function getListaUsinas() {
    return Object.keys(USINAS_DISPONIVEIS);
}

// Fun√ß√£o para obter contexto atualizado (com data/hora)
function getContextoAtualizado() {
    return getContextoLeonardo();
}

module.exports = {
    getContextoAtualizado,
    adicionarInteracaoHistorico,
    atualizarDadosAPI,
    getContextoComHistorico,
    obterHistoricoFormatado,
    limparHistoricoUsuario,
    limparTodoHistorico,
    obterEstatisticasHistorico,
    atualizarConfigHistorico,
    USINAS_DISPONIVEIS,
    getContextoFormatado,
    validarNomeUsina,
    getDadosUsina,
    getListaUsinas
};